/Users/macbook/Documents/Blockchain/Rare/RareSkills/src/Week4/EchidnaExercise/task.sol
  1 |     | // SPDX-License-Identifier: AGPL-3.0
  2 |     | pragma solidity ^0.8.0;
  3 |     | 
  4 |     | contract Ownable {
  5 | *   |     address public owner = msg.sender;
  6 |     | 
  7 |     |     // fix for test1
  8 |     |     // function Owner() public {
  9 |     |     //     owner = msg.sender;
 10 |     |     // }
 11 |     | 
 12 | *   |     function transferOwnership(address newOwner) public onlyOwner {
 13 | *   |         owner = newOwner;
 14 |     |     }
 15 |     | 
 16 |     |     modifier onlyOwner() {
 17 | *r  |         require(msg.sender == owner, "Ownable: Caller is not the owner.");
 18 |     |         _;
 19 |     |     }
 20 |     | }
 21 |     | 
 22 |     | contract Pausable is Ownable {
 23 |     |     bool private _paused;
 24 |     | 
 25 | *   |     function paused() public view returns (bool) {
 26 | *   |         return _paused;
 27 |     |     }
 28 |     | 
 29 | *   |     function pause() public onlyOwner {
 30 | *   |         _paused = true;
 31 |     |     }
 32 |     | 
 33 | *   |     function resume() public onlyOwner {
 34 | *   |         _paused = false;
 35 |     |     }
 36 |     | 
 37 |     |     modifier whenNotPaused() {
 38 | *r  |         require(!_paused, "Pausable: Contract is paused.");
 39 |     |         _;
 40 |     |     }
 41 |     | }
 42 |     | 
 43 |     | contract Task is Ownable, Pausable {
 44 | *   |     mapping(address => uint256) public balances;
 45 |     | 
 46 | *   |     function transfer(address to, uint256 value) public virtual whenNotPaused {
 47 | *r  |         require(balances[msg.sender] >= value, "above user balance"); // fix for test.sol and test3.sol or remove unchecked
 48 |     |         // unchecked to save gas
 49 |     |         unchecked {
 50 | *   |             balances[msg.sender] -= value;
 51 | *   |             balances[to] += value;
 52 |     |         }
 53 |     |     }
 54 |     | }
 55 |     | 

/Users/macbook/Documents/Blockchain/Rare/RareSkills/src/Week4/EchidnaExercise/test3.sol
  1 |     | pragma solidity ^0.8.0;
  2 |     | 
  3 |     | import "./task.sol";
  4 |     | 
  5 | *r  | contract TestToken is Task {
  6 | *   |     function transfer(address to, uint256 value) public override {
  7 | *   |         uint256 senderBalancerBeforeTx = balances[msg.sender];
  8 | *   |         uint256 receiverBalancerBeforeTx = balances[to];
  9 |     | 
 10 | *   |         super.transfer(to, value);
 11 |     | 
 12 | *   |         uint256 senderBalancerAftereTx = balances[msg.sender];
 13 | *   |         uint256 receiverBalancerAftereTx = balances[to];
 14 |     | 
 15 | *   |         assert(senderBalancerBeforeTx >= senderBalancerAftereTx);
 16 | *   |         assert(receiverBalancerAftereTx >= receiverBalancerBeforeTx);
 17 |     |     }
 18 |     | }
 19 |     | 

